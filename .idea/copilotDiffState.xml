<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/TimeMarket_BackEnd/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/TimeMarket_BackEnd/settings.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Django settings for TimeMarket_BackEnd project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.0.6.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.0/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.0/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = &quot;django-insecure-87*r(fb$ur#dd9nkwu1(-+zfgwpr+5n_61zdtso=arl^j&amp;grp)&quot;&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;# JWT 설정 예시&#10;REST_FRAMEWORK = {&#10;    'DEFAULT_AUTHENTICATION_CLASSES': (&#10;        'rest_framework_simplejwt.authentication.JWTAuthentication',&#10;    )&#10;}&#10;&#10;from datetime import timedelta&#10;&#10;SIMPLE_JWT = {&#10;    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # 기본 5분 → 60분으로 연장&#10;    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),&#10;}&#10;&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;# settings.py&#10;AUTH_USER_MODEL = 'users.User'&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    &quot;django.contrib.admin&quot;,&#10;    &quot;django.contrib.auth&quot;,&#10;    &quot;django.contrib.contenttypes&quot;,&#10;    &quot;django.contrib.sessions&quot;,&#10;    &quot;django.contrib.messages&quot;,&#10;    &quot;django.contrib.staticfiles&quot;,&#10;    &quot;channels&quot;,  # Channels 추가&#10;    &quot;chat&quot;,      # chat 앱 추가&#10;    &quot;wallet&quot;, &quot;users&quot;, &quot;map&quot;, &quot;posts&quot;&#10;]&#10;&#10;MIDDLEWARE = [&#10;    &quot;django.middleware.security.SecurityMiddleware&quot;,&#10;    &quot;django.contrib.sessions.middleware.SessionMiddleware&quot;,&#10;    &quot;django.middleware.common.CommonMiddleware&quot;,&#10;    &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,&#10;    &quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;,&#10;    &quot;django.contrib.messages.middleware.MessageMiddleware&quot;,&#10;    &quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;,&#10;]&#10;&#10;ROOT_URLCONF = &quot;TimeMarket_BackEnd.urls&quot;&#10;&#10;TEMPLATES = [&#10;    {&#10;        &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,&#10;        &quot;DIRS&quot;: [],&#10;        &quot;APP_DIRS&quot;: True,&#10;        &quot;OPTIONS&quot;: {&#10;            &quot;context_processors&quot;: [&#10;                &quot;django.template.context_processors.debug&quot;,&#10;                &quot;django.template.context_processors.request&quot;,&#10;                &quot;django.contrib.auth.context_processors.auth&quot;,&#10;                &quot;django.contrib.messages.context_processors.messages&quot;,&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = &quot;TimeMarket_BackEnd.wsgi.application&quot;&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    &quot;default&quot;: {&#10;        &quot;ENGINE&quot;: &quot;django.db.backends.sqlite3&quot;,&#10;        &quot;NAME&quot;: BASE_DIR / &quot;db.sqlite3&quot;,&#10;    }&#10;}&#10;&#10;# 미디어 작업&#10;import os&#10;&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#10;&#10;MEDIA_URL = '/media/'&#10;MEDIA_ROOT = os.path.join(BASE_DIR, 'media')&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&quot;,&#10;    },&#10;    {&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.MinimumLengthValidator&quot;,&#10;    },&#10;    {&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.CommonPasswordValidator&quot;,&#10;    },&#10;    {&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.NumericPasswordValidator&quot;,&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.0/topics/i18n/&#10;&#10;LANGUAGE_CODE = &quot;en-us&quot;&#10;&#10;TIME_ZONE = &quot;UTC&quot;&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.0/howto/static-files/&#10;&#10;STATIC_URL = &quot;static/&quot;&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = &quot;django.db.models.BigAutoField&quot;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#13;&#10;Django settings for TimeMarket_BackEnd project.&#13;&#10;&#13;&#10;Generated by 'django-admin startproject' using Django 5.0.6.&#13;&#10;&#13;&#10;For more information on this file, see&#13;&#10;https://docs.djangoproject.com/en/5.0/topics/settings/&#13;&#10;&#13;&#10;For the full list of settings and their values, see&#13;&#10;https://docs.djangoproject.com/en/5.0/ref/settings/&#13;&#10;&quot;&quot;&quot;&#13;&#10;&#13;&#10;from pathlib import Path&#13;&#10;&#13;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#13;&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#13;&#10;&#13;&#10;&#13;&#10;# Quick-start development settings - unsuitable for production&#13;&#10;# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/&#13;&#10;&#13;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#13;&#10;SECRET_KEY = &quot;django-insecure-87*r(fb$ur#dd9nkwu1(-+zfgwpr+5n_61zdtso=arl^j&amp;grp)&quot;&#13;&#10;&#13;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#13;&#10;DEBUG = True&#13;&#10;&#13;&#10;# JWT 설정 예시&#13;&#10;REST_FRAMEWORK = {&#13;&#10;    'DEFAULT_AUTHENTICATION_CLASSES': (&#13;&#10;        'rest_framework_simplejwt.authentication.JWTAuthentication',&#13;&#10;    )&#13;&#10;}&#13;&#10;&#13;&#10;from datetime import timedelta&#13;&#10;&#13;&#10;SIMPLE_JWT = {&#13;&#10;    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # 기본 5분 → 60분으로 연장&#13;&#10;    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),&#13;&#10;}&#13;&#10;&#13;&#10;&#13;&#10;ALLOWED_HOSTS = []&#13;&#10;&#13;&#10;# settings.py&#13;&#10;AUTH_USER_MODEL = 'users.User'&#13;&#10;&#13;&#10;&#13;&#10;# Application definition&#13;&#10;&#13;&#10;INSTALLED_APPS = [&#13;&#10;    &quot;django.contrib.admin&quot;,&#13;&#10;    &quot;django.contrib.auth&quot;,&#13;&#10;    &quot;django.contrib.contenttypes&quot;,&#13;&#10;    &quot;django.contrib.sessions&quot;,&#13;&#10;    &quot;django.contrib.messages&quot;,&#13;&#10;    &quot;django.contrib.staticfiles&quot;,&#13;&#10;    &quot;channels&quot;,  # Channels 추가&#13;&#10;    &quot;chat&quot;,      # chat 앱 추가&#13;&#10;    &quot;wallet&quot;, &quot;users&quot;, &quot;map&quot;, &quot;posts&quot;&#13;&#10;]&#13;&#10;&#13;&#10;MIDDLEWARE = [&#13;&#10;    &quot;django.middleware.security.SecurityMiddleware&quot;,&#13;&#10;    &quot;django.contrib.sessions.middleware.SessionMiddleware&quot;,&#13;&#10;    &quot;django.middleware.common.CommonMiddleware&quot;,&#13;&#10;    &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,&#13;&#10;    &quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;,&#13;&#10;    &quot;django.contrib.messages.middleware.MessageMiddleware&quot;,&#13;&#10;    &quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;,&#13;&#10;]&#13;&#10;&#13;&#10;ROOT_URLCONF = &quot;TimeMarket_BackEnd.urls&quot;&#13;&#10;&#13;&#10;TEMPLATES = [&#13;&#10;    {&#13;&#10;        &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,&#13;&#10;        &quot;DIRS&quot;: [],&#13;&#10;        &quot;APP_DIRS&quot;: True,&#13;&#10;        &quot;OPTIONS&quot;: {&#13;&#10;            &quot;context_processors&quot;: [&#13;&#10;                &quot;django.template.context_processors.debug&quot;,&#13;&#10;                &quot;django.template.context_processors.request&quot;,&#13;&#10;                &quot;django.contrib.auth.context_processors.auth&quot;,&#13;&#10;                &quot;django.contrib.messages.context_processors.messages&quot;,&#13;&#10;            ],&#13;&#10;        },&#13;&#10;    },&#13;&#10;]&#13;&#10;&#13;&#10;WSGI_APPLICATION = &quot;TimeMarket_BackEnd.wsgi.application&quot;&#13;&#10;ASGI_APPLICATION = &quot;TimeMarket_BackEnd.asgi.application&quot;&#13;&#10;&#13;&#10;&#13;&#10;# Database&#13;&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#databases&#13;&#10;&#13;&#10;DATABASES = {&#13;&#10;    &quot;default&quot;: {&#13;&#10;        &quot;ENGINE&quot;: &quot;django.db.backends.sqlite3&quot;,&#13;&#10;        &quot;NAME&quot;: BASE_DIR / &quot;db.sqlite3&quot;,&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;# 미디어 작업&#13;&#10;import os&#13;&#10;&#13;&#10;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))&#13;&#10;&#13;&#10;MEDIA_URL = '/media/'&#13;&#10;MEDIA_ROOT = os.path.join(BASE_DIR, 'media')&#13;&#10;&#13;&#10;&#13;&#10;# Password validation&#13;&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators&#13;&#10;&#13;&#10;AUTH_PASSWORD_VALIDATORS = [&#13;&#10;    {&#13;&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.MinimumLengthValidator&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.CommonPasswordValidator&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;        &quot;NAME&quot;: &quot;django.contrib.auth.password_validation.NumericPasswordValidator&quot;,&#13;&#10;    },&#13;&#10;]&#13;&#10;&#13;&#10;&#13;&#10;# Internationalization&#13;&#10;# https://docs.djangoproject.com/en/5.0/topics/i18n/&#13;&#10;&#13;&#10;LANGUAGE_CODE = &quot;en-us&quot;&#13;&#10;&#13;&#10;TIME_ZONE = &quot;UTC&quot;&#13;&#10;&#13;&#10;USE_I18N = True&#13;&#10;&#13;&#10;USE_TZ = True&#13;&#10;&#13;&#10;&#13;&#10;# Static files (CSS, JavaScript, Images)&#13;&#10;# https://docs.djangoproject.com/en/5.0/howto/static-files/&#13;&#10;&#13;&#10;STATIC_URL = &quot;static/&quot;&#13;&#10;&#13;&#10;# Default primary key field type&#13;&#10;# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field&#13;&#10;&#13;&#10;DEFAULT_AUTO_FIELD = &quot;django.db.models.BigAutoField&quot;&#13;&#10;&#13;&#10;CHANNEL_LAYERS = {&#13;&#10;    &quot;default&quot;: {&#13;&#10;        &quot;BACKEND&quot;: &quot;channels.layers.InMemoryChannelLayer&quot;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat" />
              <option name="originalContent" value="// (새 폴더 생성 - 코드 파일 없음)&#10;" />
              <option name="updatedContent" value="// (새 폴더 생성 - 코드 파일 없음)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat/crud.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat/crud.py" />
              <option name="updatedContent" value="from sqlalchemy.orm import Session&#10;from . import models, schemas&#10;&#10;def create_chat(db: Session, chat: schemas.ChatCreate):&#10;    db_chat = models.Chat(user1_id=chat.user1_id, user2_id=chat.user2_id)&#10;    db.add(db_chat)&#10;    db.commit()&#10;    db.refresh(db_chat)&#10;    return db_chat&#10;&#10;def get_chat(db: Session, chat_id: int):&#10;    return db.query(models.Chat).filter(models.Chat.id == chat_id).first()&#10;&#10;def create_message(db: Session, message: schemas.MessageCreate):&#10;    db_message = models.Message(**message.dict())&#10;    db.add(db_message)&#10;    db.commit()&#10;    db.refresh(db_message)&#10;    return db_message&#10;&#10;def get_messages(db: Session, chat_id: int):&#10;    return db.query(models.Message).filter(models.Message.chat_id == chat_id).order_by(models.Message.timestamp).all()&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat/routes.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat/routes.py" />
              <option name="updatedContent" value="from fastapi import APIRouter, Depends, HTTPException&#10;from sqlalchemy.orm import Session&#10;from . import schemas, crud&#10;from ..database import get_db&#10;&#10;router = APIRouter(prefix=&quot;/chat&quot;, tags=[&quot;chat&quot;])&#10;&#10;@router.post(&quot;/room&quot;, response_model=schemas.ChatRead)&#10;def create_chat_room(chat: schemas.ChatCreate, db: Session = Depends(get_db)):&#10;    return crud.create_chat(db, chat)&#10;&#10;@router.get(&quot;/room/{chat_id}&quot;, response_model=schemas.ChatRead)&#10;def get_chat_room(chat_id: int, db: Session = Depends(get_db)):&#10;    chat = crud.get_chat(db, chat_id)&#10;    if not chat:&#10;        raise HTTPException(status_code=404, detail=&quot;Chat not found&quot;)&#10;    return chat&#10;&#10;@router.post(&quot;/message&quot;, response_model=schemas.MessageRead)&#10;def send_message(message: schemas.MessageCreate, db: Session = Depends(get_db)):&#10;    return crud.create_message(db, message)&#10;&#10;@router.get(&quot;/messages/{chat_id}&quot;, response_model=list[schemas.MessageRead])&#10;def get_chat_messages(chat_id: int, db: Session = Depends(get_db)):&#10;    return crud.get_messages(db, chat_id)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat/routing.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat/routing.py" />
              <option name="updatedContent" value="from django.urls import re_path&#10;from . import consumers&#10;&#10;websocket_urlpatterns = [&#10;    re_path(r'ws/chat/(?P&lt;room_name&gt;[^/]+)/$', consumers.ChatConsumer.as_asgi()),&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat/schemas.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat/schemas.py" />
              <option name="updatedContent" value="from pydantic import BaseModel&#10;from typing import List, Optional&#10;from datetime import datetime&#10;&#10;class MessageCreate(BaseModel):&#10;    chat_id: int&#10;    sender_id: int&#10;    content: str&#10;&#10;class MessageRead(BaseModel):&#10;    id: int&#10;    chat_id: int&#10;    sender_id: int&#10;    content: str&#10;    timestamp: datetime&#10;&#10;    class Config:&#10;        orm_mode = True&#10;&#10;class ChatCreate(BaseModel):&#10;    user1_id: int&#10;    user2_id: int&#10;&#10;class ChatRead(BaseModel):&#10;    id: int&#10;    user1_id: int&#10;    user2_id: int&#10;    messages: List[MessageRead] = []&#10;&#10;    class Config:&#10;        orm_mode = True&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/chat/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/chat/views.py" />
              <option name="originalContent" value="from rest_framework import generics, status&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;from rest_framework.permissions import IsAuthenticated&#10;from .models import Room, ChatMessage&#10;from .serializers import RoomSerializer, ChatMessageSerializer&#10;from users.models import User&#10;from posts.models import TimePost&#10;&#10;class MatchRequestView(APIView):&#10;    permission_classes = [IsAuthenticated]&#10;    def post(self, request):&#10;        post_id = request.data.get('post_id')&#10;        receiver_id = request.data.get('receiver_id')&#10;        post = TimePost.objects.get(id=post_id)&#10;        receiver = User.objects.get(id=receiver_id)&#10;        room = Room.objects.create(post=post)&#10;        room.users.add(request.user, receiver)&#10;        return Response(RoomSerializer(room).data, status=status.HTTP_201_CREATED)&#10;&#10;class MyChatsView(generics.ListAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    serializer_class = RoomSerializer&#10;    def get_queryset(self):&#10;        return Room.objects.filter(users=self.request.user)&#10;&#10;class ChatRoomDetailView(generics.RetrieveAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    queryset = Room.objects.all()&#10;    serializer_class = RoomSerializer&#10;    lookup_field = 'id'&#10;    lookup_url_kwarg = 'room_id'&#10;&#10;class ChatMessageListCreateView(generics.ListCreateAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    serializer_class = ChatMessageSerializer&#10;    def get_queryset(self):&#10;        room_id = self.kwargs['room_id']&#10;        return ChatMessage.objects.filter(room_name=str(room_id)).order_by('timestamp')&#10;    def perform_create(self, serializer):&#10;        room_id = self.kwargs['room_id']&#10;        receiver_id = self.request.data.get('receiver_id')&#10;        serializer.save(&#10;            room_name=str(room_id),&#10;            sender=self.request.user,&#10;            receiver=User.objects.get(id=receiver_id)&#10;        )&#10;" />
              <option name="updatedContent" value="from rest_framework import generics, status&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;from rest_framework.permissions import IsAuthenticated&#10;from .models import Room, ChatMessage&#10;from .serializers import RoomSerializer, ChatMessageSerializer&#10;from users.models import User&#10;from posts.models import TimePost&#10;from django.http import Http404&#10;&#10;class MatchRequestView(APIView):&#10;    permission_classes = [IsAuthenticated]&#10;&#10;    def post(self, request):&#10;        post_id = request.data.get('post_id')&#10;        receiver_id = request.data.get('receiver_id')&#10;&#10;        try:&#10;            post = TimePost.objects.get(id=post_id)&#10;        except TimePost.DoesNotExist:&#10;            raise Http404(&quot;TimePost with the given ID does not exist.&quot;)&#10;&#10;        try:&#10;            receiver = User.objects.get(id=receiver_id)&#10;        except User.DoesNotExist:&#10;            raise Http404(&quot;User with the given ID does not exist.&quot;)&#10;&#10;        room = Room.objects.create(post=post)&#10;        room.users.add(request.user, receiver)&#10;        return Response(RoomSerializer(room).data, status=status.HTTP_201_CREATED)&#10;&#10;class MyChatsView(generics.ListAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    serializer_class = RoomSerializer&#10;    def get_queryset(self):&#10;        return Room.objects.filter(users=self.request.user)&#10;&#10;class ChatRoomDetailView(generics.RetrieveAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    queryset = Room.objects.all()&#10;    serializer_class = RoomSerializer&#10;    lookup_field = 'id'&#10;    lookup_url_kwarg = 'room_id'&#10;&#10;class ChatMessageListCreateView(generics.ListCreateAPIView):&#10;    permission_classes = [IsAuthenticated]&#10;    serializer_class = ChatMessageSerializer&#10;    def get_queryset(self):&#10;        room_id = self.kwargs['room_id']&#10;        return ChatMessage.objects.filter(room_name=str(room_id)).order_by('timestamp')&#10;    def perform_create(self, serializer):&#10;        room_id = self.kwargs['room_id']&#10;        receiver_id = self.request.data.get('receiver_id')&#10;        serializer.save(&#10;            room_name=str(room_id),&#10;            sender=self.request.user,&#10;            receiver=User.objects.get(id=receiver_id)&#10;        )" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/create_chat_folder.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/create_chat_folder.py" />
              <option name="updatedContent" value="import os&#10;&#10;chat_folder = &quot;chat&quot;&#10;if not os.path.exists(chat_folder):&#10;    os.makedirs(chat_folder)&#10;    print(f&quot;'{chat_folder}' 폴더가 생성되었습니다.&quot;)&#10;else:&#10;    print(f&quot;'{chat_folder}' 폴더가 이미 존재합니다.&quot;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from sqlalchemy.orm import Session&#10;from . import models, schemas&#10;&#10;def create_chat(db: Session, chat: schemas.ChatCreate):&#10;    db_chat = models.Chat(user1_id=chat.user1_id, user2_id=chat.user2_id)&#10;    db.add(db_chat)&#10;    db.commit()&#10;    db.refresh(db_chat)&#10;    return db_chat&#10;&#10;def get_chat(db: Session, chat_id: int):&#10;    return db.query(models.Chat).filter(models.Chat.id == chat_id).first()&#10;&#10;def create_message(db: Session, message: schemas.MessageCreate):&#10;    db_message = models.Message(**message.dict())&#10;    db.add(db_message)&#10;    db.commit()&#10;    db.refresh(db_message)&#10;    return db_message&#10;&#10;def get_messages(db: Session, chat_id: int):&#10;    return db.query(models.Message).filter(models.Message.chat_id == chat_id).order_by(models.Message.timestamp).all()&#10;&#10;&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from chat.routes import router as chat_router&#10;&#10;app = FastAPI()&#10;&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],  # 실제 배포 시에는 플러터 앱의 도메인으로 제한&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;app.include_router(chat_router)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>